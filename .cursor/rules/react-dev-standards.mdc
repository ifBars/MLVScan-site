---
description: 
globs: 
alwaysApply: true
---
# React 19 + shadcn/ui + Tailwind Development Standards

## General Guidelines

* Use **React 19 features**: modern Server Components, `use()` hook, `useFormStatus`, `useOptimistic`, etc.
* Prefer **async components** and **Suspense** patterns when appropriate.
* Components should be **function components** only.
* Do not use legacy lifecycle methods or class components.

## UI and Styling

* Use **shadcn/ui** components where possible. Import like this:

  ```ts
  import { Button } from "@/components/ui/button";
  ```
* Style exclusively with **Tailwind CSS** classes.

  * Use utility classes for layout, spacing, color, and responsive behavior.
  * Follow Tailwind's **mobile-first** approach.
  * Add custom classes only in `tailwind.config.ts`.

## Folder and File Structure

* Use **flat folder structure** when reasonable.
* Components go in `components/`, routes in `app/` (for Next.js or similar).
* Use PascalCase for component files and folders.

## TypeScript Standards

* All files must be `.tsx`.
* Strongly type all props and functions.
* Prefer `type` over `interface` unless extending is required.

## Component Conventions

* Keep components small and composable.
* Use `"use client"` only when required (for interactivity).
* Use Tailwind for layout instead of inline styles or CSS files.
* Always destructure props at the top of function arguments.

## Good Example

```tsx
"use client";

import { Button } from "@/components/ui/button";

type Props = {
  onClick: () => void;
};

export default function SubmitButton({ onClick }: Props) {
  return (
    <Button onClick={onClick} className="w-full mt-4">
      Submit
    </Button>
  );
}
```

## Bad Example

```tsx
import React from 'react';

function SubmitButton(props) {
  return (
    <button style={{ width: '100%' }} onClick={props.onClick}>
      Submit
    </button>
  );
}
```

## LLM Behavior Instructions (Cursor)

* Prefer modern React 19 APIs and patterns.
* Assume Tailwind and shadcn are installed and configured.
* Avoid older React syntax (e.g., `useEffect` for async data fetching).
* Output clean, readable, production-grade components with minimal logic.

